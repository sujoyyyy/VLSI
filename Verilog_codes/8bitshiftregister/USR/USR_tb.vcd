$date
	Wed Aug 26 01:05:35 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module USR_tb $end
$var wire 8 ! q [8:1] $end
$var reg 1 " clk $end
$var reg 8 # inp [8:1] $end
$var reg 1 $ reset $end
$var reg 2 % select [2:1] $end
$var reg 1 & serialin $end
$scope module srPIPO $end
$var wire 1 " clk $end
$var wire 8 ' inputs [8:1] $end
$var wire 1 $ reset $end
$var wire 2 ( select [2:1] $end
$var wire 1 & serialin $end
$var wire 4 ) w [4:1] $end
$var wire 8 * outputs [8:1] $end
$scope module u1 $end
$var wire 1 " clk $end
$var wire 4 + inputs [4:1] $end
$var wire 1 $ reset $end
$var wire 2 , select [2:1] $end
$var wire 1 & serialin $end
$var wire 4 - w [4:1] $end
$var wire 4 . outputs [4:1] $end
$scope module dff_1 $end
$var wire 1 " clk $end
$var wire 1 / d $end
$var wire 1 $ reset $end
$var reg 1 0 q $end
$upscope $end
$scope module dff_2 $end
$var wire 1 " clk $end
$var wire 1 1 d $end
$var wire 1 $ reset $end
$var reg 1 2 q $end
$upscope $end
$scope module dff_3 $end
$var wire 1 " clk $end
$var wire 1 3 d $end
$var wire 1 $ reset $end
$var reg 1 4 q $end
$upscope $end
$scope module dff_4 $end
$var wire 1 " clk $end
$var wire 1 5 d $end
$var wire 1 $ reset $end
$var reg 1 6 q $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 1 " clk $end
$var wire 4 7 inputs [4:1] $end
$var wire 1 $ reset $end
$var wire 2 8 select [2:1] $end
$var wire 1 & serialin $end
$var wire 4 9 w [4:1] $end
$var wire 4 : outputs [4:1] $end
$scope module dff_1 $end
$var wire 1 " clk $end
$var wire 1 ; d $end
$var wire 1 $ reset $end
$var reg 1 < q $end
$upscope $end
$scope module dff_2 $end
$var wire 1 " clk $end
$var wire 1 = d $end
$var wire 1 $ reset $end
$var reg 1 > q $end
$upscope $end
$scope module dff_3 $end
$var wire 1 " clk $end
$var wire 1 ? d $end
$var wire 1 $ reset $end
$var reg 1 @ q $end
$upscope $end
$scope module dff_4 $end
$var wire 1 " clk $end
$var wire 1 A d $end
$var wire 1 $ reset $end
$var reg 1 B q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xB
1A
x@
0?
x>
1=
x<
1;
bx :
b1011 9
b11 8
b1011 7
x6
15
x4
03
x2
01
x0
1/
bx .
b1001 -
b11 ,
b1001 +
bx *
b1011 )
b11 (
b10111001 '
0&
b11 %
0$
b10111001 #
0"
bx !
$end
#5
1"
#10
1B
0@
1>
b1011 :
1<
16
04
02
b10111001 !
b10111001 *
b1001 .
10
01
03
0?
1/
15
1;
1=
1A
b1001 )
b1001 7
b1001 -
b1011 9
0"
b0 %
b0 (
b0 ,
b0 8
#15
1"
#20
0/
05
01
1?
b0 -
b1111 9
b1111 )
b1111 7
b0 +
0"
b11110000 #
b11110000 '
b11 %
b11 (
b11 ,
b11 8
#25
1"
#30
b1111 :
1@
06
b11110000 !
b11110000 *
b0 .
00
01
b0 -
0;
1=
1?
1A
b0 )
b0 7
b1110 9
0"
b1 %
b1 (
b1 ,
b1 8
#35
1"
#40
0=
b1100 9
b11100000 !
b11100000 *
b1110 :
0<
0"
#45
1"
#50
0?
b11000000 !
b11000000 *
b1100 :
0>
1/
1;
b1 )
b1 7
b1 -
b1001 9
0"
1&
#55
1"
#60
11
1=
0A
b11 -
b11 )
b11 7
b11 9
b1 .
10
1<
b10010001 !
b10010001 *
b1001 :
0@
0"
#65
1"
#70
0B
b11 :
1>
b110011 !
b110011 *
b11 .
12
1?
1A
b1111 9
0/
01
b0 -
b1111 )
b1111 7
0"
b11 %
b11 (
b11 ,
b11 8
#75
1"
#80
00
b0 .
02
1@
b11110000 !
b11110000 *
b1111 :
1B
0/
15
b1000 -
1;
1=
1?
1A
b1000 )
b1000 7
b1111 9
0"
b10 %
b10 (
b10 ,
b10 8
#85
1"
#90
13
b1100 -
b1100 )
b1100 7
b11111000 !
b11111000 *
b1000 .
16
0"
#95
1"
#100
11
b1110 -
b1110 )
b1110 7
b11111100 !
b11111100 *
b1100 .
14
0"
